A <- 1 - (alpha / 2)
B <- alpha / 2
LCL1 <- -C_star * log(A)
UCL1 <- -C_star * log(B)
LCL2 <- x2 - (theta1[i] * log(A))
UCL2 <- x2 - (theta1[i] * log(B))
cons <- theta2[i] / (theta1[i] + theta2[i])
const <- (alpha*theta2[i]) / (2 *(theta1[i] + theta2[i]))
num <- 2 + (cons * (exp(-LCL1 * C) - exp(-UCL1 * C) - 1))
denum <-
-(cons * (exp(-LCL1 * C) - exp(-UCL1 * C) - 1)) + (cons * (exp(-LCL1 * C) - exp(-UCL1 * C)))
ATS <- E * (num/denum)
print(ATS)
}
theta1 <- c(5.0, 7.5, 10.0, 7.5, 10.0, 5.0, 5.0, 2.5, 1.0)
theta2 <- c(5.0, 5.0, 5.0, 7.5, 10.0, 2.5, 1.0, 2.5, 1.0)
x1 <- 2530
x2 <- 3720
alpha <- 0.01875
for (i in 1:length(theta1)) {
C <- (1 / theta1[i]) + (1 / theta2[i])
C_star <- C ^ (-1)
E <- 0.5 * (theta1[i] + theta2[i] - C_star)
A <- 1 - (alpha / 2)
B <- alpha / 2
LCL1 <- -C_star * log(A)
UCL1 <- -C_star * log(B)
LCL2 <- x2 - (theta1[i] * log(A))
UCL2 <- x2 - (theta1[i] * log(B))
cons <- theta2[i] / (theta1[i] + theta2[i])
const <- (alpha*theta2[i]) / (2 *(theta1[i] + theta2[i]))
num <- 2 + (cons * (exp(-LCL1 * C) - exp(-UCL1 * C) - 1))
denum <-
-(cons * (exp(-LCL1 * C) - exp(-UCL1 * C) - 1)) + (const * (exp(-LCL1 * C) - exp(-UCL1 * C)))
ATS <- E * (num/denum)
print(ATS)
}
theta1 <- c(5.0, 7.5, 10.0, 7.5, 10.0, 5.0, 5.0, 2.5, 1.0)
theta2 <- c(5.0, 5.0, 5.0, 7.5, 10.0, 2.5, 1.0, 2.5, 1.0)
alpha <- 0.01875
for (i in 1:length(theta1)) {
C <- (1 / theta1[i]) + (1 / theta2[i])
C_star <- C ^ (-1)
E <- 0.5 * (theta1[i] + theta2[i] - C_star)
A <- 1 - (alpha / 2)
B <- alpha / 2
LCL1 <- -C_star * log(A)
UCL1 <- -C_star * log(B)
cons <- theta2[i] / (theta1[i] + theta2[i])
const <- (alpha*theta2[i]) / (2 *(theta1[i] + theta2[i]))
num <- 2 + (cons * (exp(-LCL1 * C) - exp(-UCL1 * C) - 1))
denum <-
-(cons * (exp(-LCL1 * C) - exp(-UCL1 * C) - 1)) + (const * (exp(-LCL1 * C) - exp(-UCL1 * C)))
ATS <- E * (num/denum)
print(ATS)
}
theta1 <- c(5.0, 7.5, 10.0, 7.5, 10.0, 5.0, 5.0, 2.5, 1.0)
theta2 <- c(5.0, 5.0, 5.0, 7.5, 10.0, 2.5, 1.0, 2.5, 1.0)
#alpha <- 0.01875
ATS <- 200
for (i in 1:length(theta1)) {
C <- (1 / theta1[i]) + (1 / theta2[i])
C_star <- C ^ (-1)
E <- 0.5 * (theta1[i] + theta2[i] - C_star)
alpha <- E/ATS
A <- 1 - (alpha / 2)
B <- alpha / 2
LCL1 <- -C_star * log(A)
UCL1 <- -C_star * log(B)
cons <- theta2[i] / (theta1[i] + theta2[i])
const <- (alpha*theta2[i]) / (2 *(theta1[i] + theta2[i]))
num <- 2 + (cons * (exp(-LCL1 * C) - exp(-UCL1 * C) - 1))
denum <-
-(cons * (exp(-LCL1 * C) - exp(-UCL1 * C) - 1)) + (const * (exp(-LCL1 * C) - exp(-UCL1 * C)))
ATS <- E * (num/denum)
print(ATS)
}
theta1 <- c(5.0, 7.5, 10.0, 7.5, 10.0, 5.0, 5.0, 2.5, 1.0)
theta2 <- c(5.0, 5.0, 5.0, 7.5, 10.0, 2.5, 1.0, 2.5, 1.0)
#alpha <- 0.01875
ATS <- 200
for (i in 1:length(theta1)) {
C <- (1 / theta1[i]) + (1 / theta2[i])
C_star <- C ^ (-1)
E <- 0.5 * (theta1[i] + theta2[i] - C_star)
alpha <- 2*E/ATS
A <- 1 - (alpha / 2)
B <- alpha / 2
LCL1 <- -C_star * log(A)
UCL1 <- -C_star * log(B)
cons <- theta2[i] / (theta1[i] + theta2[i])
const <- (alpha*theta2[i]) / (2 *(theta1[i] + theta2[i]))
num <- 2 + (cons * (exp(-LCL1 * C) - exp(-UCL1 * C) - 1))
denum <-
-(cons * (exp(-LCL1 * C) - exp(-UCL1 * C) - 1)) + (const * (exp(-LCL1 * C) - exp(-UCL1 * C)))
ATS <- E * (num/denum)
print(ATS)
}
theta1 <- c(5.0, 7.5, 10.0, 7.5, 10.0, 5.0, 5.0, 2.5, 1.0)
theta2 <- c(5.0, 5.0, 5.0, 7.5, 10.0, 2.5, 1.0, 2.5, 1.0)
#alpha <- 0.01875
ATS <- 200
for (i in 1:length(theta1)) {
C <- (1 / theta1[i]) + (1 / theta2[i])
C_star <- C ^ (-1)
E <- 0.5 * (theta1[i] + theta2[i] - C_star)
alpha <- E/(2*ATS)
A <- 1 - (alpha / 2)
B <- alpha / 2
LCL1 <- -C_star * log(A)
UCL1 <- -C_star * log(B)
cons <- theta2[i] / (theta1[i] + theta2[i])
const <- (alpha*theta2[i]) / (2 *(theta1[i] + theta2[i]))
num <- 2 + (cons * (exp(-LCL1 * C) - exp(-UCL1 * C) - 1))
denum <-
-(cons * (exp(-LCL1 * C) - exp(-UCL1 * C) - 1)) + (const * (exp(-LCL1 * C) - exp(-UCL1 * C)))
ATS <- E * (num/denum)
print(ATS)
}
theta1 <- c(5.0, 7.5, 10.0, 7.5, 10.0, 5.0, 5.0, 2.5, 1.0)
theta2 <- c(5.0, 5.0, 5.0, 7.5, 10.0, 2.5, 1.0, 2.5, 1.0)
#alpha <- 0.01875
ATS <- 200
for (i in 1:length(theta1)) {
C <- (1 / theta1[i]) + (1 / theta2[i])
C_star <- C ^ (-1)
E <- 0.5 * (theta1[i] + theta2[i] - C_star)
alpha <- E/(ATS/2)
A <- 1 - (alpha / 2)
B <- alpha / 2
LCL1 <- -C_star * log(A)
UCL1 <- -C_star * log(B)
cons <- theta2[i] / (theta1[i] + theta2[i])
const <- (alpha*theta2[i]) / (2 *(theta1[i] + theta2[i]))
num <- 2 + (cons * (exp(-LCL1 * C) - exp(-UCL1 * C) - 1))
denum <-
-(cons * (exp(-LCL1 * C) - exp(-UCL1 * C) - 1)) + (const * (exp(-LCL1 * C) - exp(-UCL1 * C)))
ATS <- E * (num/denum)
print(ATS)
}
theta1 <- c(5.0, 7.5, 10.0, 7.5, 10.0, 5.0, 5.0, 2.5, 1.0)
theta2 <- c(5.0, 5.0, 5.0, 7.5, 10.0, 2.5, 1.0, 2.5, 1.0)
#alpha <- 0.01875
C <- (1 / theta1[1]) + (1 / theta2[1])
C_star <- C ^ (-1)
E <- 0.5 * (theta1[1] + theta2[1] - C_star)
ATS <- 200
alpha <- (2*E)/ATS
for (i in 1:length(theta1)) {
C <- (1 / theta1[i]) + (1 / theta2[i])
C_star <- C ^ (-1)
E1 <- 0.5 * (theta1[i] + theta2[i] - C_star)
A <- 1 - (alpha / 2)
B <- alpha / 2
LCL1 <- -C_star * log(A)
UCL1 <- -C_star * log(B)
cons <- theta2[i] / (theta1[i] + theta2[i])
const <- (alpha*theta2[i]) / (2 *(theta1[i] + theta2[i]))
num <- 2 + (cons * (exp(-LCL1 * C) - exp(-UCL1 * C) - 1))
denum <-
-(cons * (exp(-LCL1 * C) - exp(-UCL1 * C) - 1)) + (const * (exp(-LCL1 * C) - exp(-UCL1 * C)))
ATS <- E1 * (num/denum)
print(ATS)
}
theta1 <- c(5.0, 7.5, 10.0, 7.5, 10.0, 5.0, 5.0, 2.5, 1.0)
theta2 <- c(5.0, 5.0, 5.0, 7.5, 10.0, 2.5, 1.0, 2.5, 1.0)
alpha <- 0.01875
for (i in 1:length(theta1)) {
C <- (1 / theta1[i]) + (1 / theta2[i])
C_star <- C ^ (-1)
C11 <- C/C_star
E1 <- 0.5 * (theta1[i] + theta2[i] - C_star)
A <- 1 - (alpha / 2)
B <- alpha / 2
LCL1 <- -C_star * log(A)
UCL1 <- -C_star * log(B)
cons <- theta2[i] / (theta1[i] + theta2[i])
#const <- (alpha*theta2[i]) / (2 *(theta1[i] + theta2[i]))
cons_ <- cons + 1
#num <- 2 + (cons * (exp(-LCL1 * C) - exp(-UCL1 * C) - 1))
num <- 2 + (cons * ((A^C11) - (B^C11) - 1))
denum <- (A^C11)*cons_ - (B^C11)*cons_ - cons
#denum <-
#  -(cons * (exp(-LCL1 * C) - exp(-UCL1 * C) - 1)) + (const * (exp(-LCL1 * C) - exp(-UCL1 * C)))
ATS <- E1 * (num/denum)
print(ATS)
}
theta1 <- c(5.0, 7.5, 10.0, 7.5, 10.0, 5.0, 5.0, 2.5, 1.0)
theta2 <- c(5.0, 5.0, 5.0, 7.5, 10.0, 2.5, 1.0, 2.5, 1.0)
alpha <- 0.01875
for (i in 1:length(theta1)) {
C <- (1 / theta1[i]) + (1 / theta2[i])
C_star <- C ^ (-1)
C11 <- C/C_star
E1 <- 0.5 * (theta1[i] + theta2[i] - C_star)
A <- 1 - (alpha / 2)
B <- alpha / 2
LCL1 <- -C_star * log(A)
UCL1 <- -C_star * log(B)
cons <- theta2[i] / (theta1[i] + theta2[i])
#const <- (alpha*theta2[i]) / (2 *(theta1[i] + theta2[i]))
cons_ <- cons + 1
#num <- 2 + (cons * (exp(-LCL1 * C) - exp(-UCL1 * C) - 1))
num <- 2 + (cons * ((A^C11) - (B^C11) - 1))
denum <- ((A^C11)*cons_) - ((B^C11)*cons_) - cons
#denum <-
#  -(cons * (exp(-LCL1 * C) - exp(-UCL1 * C) - 1)) + (const * (exp(-LCL1 * C) - exp(-UCL1 * C)))
ATS <- E1 * (num/denum)
print(ATS)
}
theta1 <- c(5.0, 7.5, 10.0, 7.5, 10.0, 5.0, 5.0, 2.5, 1.0)
theta2 <- c(5.0, 5.0, 5.0, 7.5, 10.0, 2.5, 1.0, 2.5, 1.0)
alpha <- 0.01875
for (i in 1:length(theta1)) {
C <- (1 / theta1[i]) + (1 / theta2[i])
C_star <- C ^ (-1)
C11 <- C_star/C
E1 <- 0.5 * (theta1[i] + theta2[i] - C_star)
A <- 1 - (alpha / 2)
B <- alpha / 2
LCL1 <- -C_star * log(A)
UCL1 <- -C_star * log(B)
cons <- theta2[i] / (theta1[i] + theta2[i])
#const <- (alpha*theta2[i]) / (2 *(theta1[i] + theta2[i]))
cons_ <- cons + 1
#num <- 2 + (cons * (exp(-LCL1 * C) - exp(-UCL1 * C) - 1))
num <- 2 + (cons * ((A^C11) - (B^C11) - 1))
denum <- ((A^C11)*cons_) - ((B^C11)*cons_) - cons
#denum <-
#  -(cons * (exp(-LCL1 * C) - exp(-UCL1 * C) - 1)) + (const * (exp(-LCL1 * C) - exp(-UCL1 * C)))
ATS <- E1 * (num/denum)
print(ATS)
}
theta1 <- c(5.0, 7.5, 10.0, 7.5, 10.0, 5.0, 5.0, 2.5, 1.0)
theta2 <- c(5.0, 5.0, 5.0, 7.5, 10.0, 2.5, 1.0, 2.5, 1.0)
alpha <- 0.01875
for (i in 1:length(theta1)) {
C <- (1 / theta1[i]) + (1 / theta2[i])
C_star <- C ^ (-1)
C11 <- C/C_star
E1 <- 0.5 * (theta1[i] + theta2[i] - C_star)
A <- 1 - (alpha / 2)
B <- alpha / 2
LCL1 <- -C_star * log(A)
UCL1 <- -C_star * log(B)
cons <- theta2[i] / (theta1[i] + theta2[i])
#const <- (alpha*theta2[i]) / (2 *(theta1[i] + theta2[i]))
cons_ <- cons + 1
#num <- 2 + (cons * (exp(-LCL1 * C) - exp(-UCL1 * C) - 1))
num <- 2 - (1- (A^C11) - (B^C11))
denum <- 2*((A^C11)*cons_) - 2*((B^C11)*cons_) - 1
#denum <-
#  -(cons * (exp(-LCL1 * C) - exp(-UCL1 * C) - 1)) + (const * (exp(-LCL1 * C) - exp(-UCL1 * C)))
ATS <- E1 * (num/denum)
print(ATS)
}
theta1 <- c(5.0, 7.5, 10.0, 7.5, 10.0, 5.0, 5.0, 2.5, 1.0)
theta2 <- c(5.0, 5.0, 5.0, 7.5, 10.0, 2.5, 1.0, 2.5, 1.0)
alpha <- 0.01875
for (i in 1:length(theta1)) {
C <- (1 / theta1[i]) + (1 / theta2[i])
C_star <- C ^ (-1)
C11 <- C/C_star
E1 <- 0.5 * (theta1[i] + theta2[i] - C_star)
A <- 1 - (alpha / 2)
B <- alpha / 2
LCL1 <- -C_star * log(A)
UCL1 <- -C_star * log(B)
cons <- theta2[i] / (theta1[i] + theta2[i])
#const <- (alpha*theta2[i]) / (2 *(theta1[i] + theta2[i]))
cons_ <- cons + 1
#num <- 2 + (cons * (exp(-LCL1 * C) - exp(-UCL1 * C) - 1))
num <- 2 - (1- (A^C11) + (B^C11))
denum <- 2*((A^C11)*cons_) - 2*((B^C11)*cons_) - 1
#denum <-
#  -(cons * (exp(-LCL1 * C) - exp(-UCL1 * C) - 1)) + (const * (exp(-LCL1 * C) - exp(-UCL1 * C)))
ATS <- E1 * (num/denum)
print(ATS)
}
theta1 <- c(5.0, 7.5, 10.0, 7.5, 10.0, 5.0, 5.0, 2.5, 1.0)
theta2 <- c(5.0, 5.0, 5.0, 7.5, 10.0, 2.5, 1.0, 2.5, 1.0)
alpha <- 0.01875
for (i in 1:length(theta1)) {
C <- (1 / theta1[i]) + (1 / theta2[i])
C_star <- C ^ (-1)
C11 <- C/C_star
E1 <- 0.5 * (theta1[i] + theta2[i] - C_star)
A <- 1 - (alpha / 2)
B <- alpha / 2
LCL1 <- -C_star * log(A)
UCL1 <- -C_star * log(B)
cons <- theta2[i] / (theta1[i] + theta2[i])
#const <- (alpha*theta2[i]) / (2 *(theta1[i] + theta2[i]))
cons_ <- cons + 1
#num <- 2 + (cons * (exp(-LCL1 * C) - exp(-UCL1 * C) - 1))
num <- 2 + (cons * ((A^C11) + (B^C11) - 1))
denum <- (cons * ((A^C11) + (B^C11) - 1)) + ((alpha*cons) * ((A^C11) + (B^C11)))
#denum <-
#  -(cons * (exp(-LCL1 * C) - exp(-UCL1 * C) - 1)) + (const * (exp(-LCL1 * C) - exp(-UCL1 * C)))
ATS <- E1 * (num/denum)
print(ATS)
}
((1/5) + (1/5))^(-1)
A <- ((1/5) + (1/5))^(-1)
EM <- 0.5*(5 + 5 - A)
EM
EM/200
U <- 2 - 0.01875
V <- 1 - ((1-0.01875)*(1-(2*0.01875)))
U/V
3*9
4*9
(1/27)+(1/36)
7/108
theta1 <- c(5.0, 7.5, 10.0, 7.5, 10.0, 5.0, 5.0, 2.5, 1.0)
theta2 <- c(5.0, 5.0, 5.0, 7.5, 10.0, 2.5, 1.0, 2.5, 1.0)
alpha <- 0.01875
for (i in 1:length(theta1)) {
C <- (1 / theta1[i]) + (1 / theta2[i])
C_star <- C ^ (-1)
C11 <- C / C_star
E1 <- 0.5 * (theta1[i] + theta2[i] - C_star)
A <- 1 - (alpha / 2)
B <- alpha / 2
cons <- 1 / (t1 * C)
const <- 1 / (t2 * C)
num <- 2 - (1 - A ^ C11 + B ^ C11)
denum <-
(1 - A ^ C11 + B ^ C11) + ((B ^ C11 - A ^ C11) * (cons * (A ^ theta2[i] - B ^
theta2[i] - 1)) - (const * (A ^ theta1[i] + B ^ theta1[i] + 1)))
ATS <- E1 * (num / denum)
print(ATS)
}
theta1 <- c(5.0, 7.5, 10.0, 7.5, 10.0, 5.0, 5.0, 2.5, 1.0)
theta2 <- c(5.0, 5.0, 5.0, 7.5, 10.0, 2.5, 1.0, 2.5, 1.0)
alpha <- 0.01875
teta <- c(1, 1)
for (i in 1:length(theta1)) {
C <- (1 / theta1[i]) + (1 / theta2[i])
C_star <- C ^ (-1)
C11 <- C / C_star
E1 <- 0.5 * (theta1[i] + theta2[i] - C_star)
A <- 1 - (alpha / 2)
B <- alpha / 2
cons <- 1 / (teta[1] * C)
const <- 1 / (teta[2] * C)
num <- 2 - (1 - A ^ C11 + B ^ C11)
denum <-
(1 - A ^ C11 + B ^ C11) + ((B ^ C11 - A ^ C11) * (cons * (A ^ theta2[i] - B ^
theta2[i] - 1)) - (const * (A ^ theta1[i] + B ^ theta1[i] + 1)))
ATS <- E1 * (num / denum)
print(ATS)
}
theta1 <- c(5.0, 7.5, 10.0, 7.5, 10.0, 5.0, 5.0, 2.5, 1.0)
theta2 <- c(5.0, 5.0, 5.0, 7.5, 10.0, 2.5, 1.0, 2.5, 1.0)
alpha <- 0.01875
teta <- c(1, 1)
for (i in 1:length(theta1)) {
C <- (1 / theta1[i]) + (1 / theta2[i])
C_star <- C ^ (-1)
C11 <- C / C_star
E1 <- 0.5 * (theta1[i] + theta2[i] - C_star)
A <- 1 - (alpha / 2)
B <- alpha / 2
cons <- 1 / (theta1[i] * C)
const <- 1 / (theta2[i] * C)
num <- 2 - (1 - A ^ C11 + B ^ C11)
denum <-
(1 - A ^ C11 + B ^ C11) + ((B ^ C11 - A ^ C11) * (cons * (A ^ theta2[i] - B ^
theta2[i] - 1)) - (const * (A ^ theta1[i] + B ^ theta1[i] + 1)))
aa <- 2 - alpha
bb <- alpha + ((alpha-1)*((alpha*cons)-(2*const)))
cc <- E1 * (aa/bb)
print(cc)
ATS <- E1 * (num / denum)
#print(ATS)
}
par_in <- c(5.0, 5.0)
par_in[0]
par_in[1]
theta1 <- c(5.0, 7.5, 10.0, 7.5, 10.0, 5.0, 5.0, 2.5, 1.0)
theta2 <- c(5.0, 5.0, 5.0, 7.5, 10.0, 2.5, 1.0, 2.5, 1.0)
par_in <- c(5.0, 5.0)
for (i in 1:length(theta1)) {
C_in <- (1 / par_in[1]) + (1 / par_in[2])
C_out <- (1 / theta1[i]) + (1 / theta2[i])
t1 <- par_in[1]/theta1[i]
t2 <- par_in[2]/theta2[i]
alpha <- 0.01875
C11 <- C_out/C_in
A <- 1 - (alpha / 2)
B <- alpha / 2
#E0 <- 0.5 * (par_in[1] + par_in[2] - C_in^(-1))
E1 <- 0.5 * (theta1[i] + theta2[i] - C_out^(-1))
cons <- 1 / (theta1[i] * C_out)
const <- 1 / (theta2[i] * C_out)
num <- 2 - (1 - (A^C11) + (B^C11))
denum <-
(1 - (A^C11) + (B^C11)) + ((B^C11 - A^C11) *
(cons * (A^t2 - B^t2 - 1)) + (const * (A^t1 - B^t1 - 1)))
ATS <- E1 * (num / denum)
print(ATS)
}
theta1 <- c(5.0, 7.5, 10.0, 7.5, 10.0, 5.0, 5.0, 2.5, 1.0)
theta2 <- c(5.0, 5.0, 5.0, 7.5, 10.0, 2.5, 1.0, 2.5, 1.0)
par_in <- c(5.0, 5.0)
for (i in 1:length(theta1)) {
C_in <- (1 / par_in[1]) + (1 / par_in[2])
C_out <- (1 / theta1[i]) + (1 / theta2[i])
t1 <- par_in[1]/theta1[i]
t2 <- par_in[2]/theta2[i]
alpha <- 10.5
C11 <- C_out/C_in
A <- 1 - (alpha / 2)
B <- alpha / 2
#E0 <- 0.5 * (par_in[1] + par_in[2] - C_in^(-1))
E1 <- 0.5 * (theta1[i] + theta2[i] - C_out^(-1))
cons <- 1 / (theta1[i] * C_out)
const <- 1 / (theta2[i] * C_out)
num <- 2 - (1 - (A^C11) + (B^C11))
denum <-
(1 - (A^C11) + (B^C11)) + ((B^C11 - A^C11) *
(cons * (A^t2 - B^t2 - 1)) + (const * (A^t1 - B^t1 - 1)))
ATS <- E1 * (num / denum)
print(ATS)
}
theta1 <- c(5.0, 7.5, 10.0, 7.5, 10.0, 5.0, 5.0, 2.5, 1.0)
theta2 <- c(5.0, 5.0, 5.0, 7.5, 10.0, 2.5, 1.0, 2.5, 1.0)
par_in <- c(5.0, 5.0)
for (i in 1:length(theta1)) {
C_in <- (1 / par_in[1]) + (1 / par_in[2])
C_out <- (1 / theta1[i]) + (1 / theta2[i])
t1 <- par_in[1]/theta1[i]
t2 <- par_in[2]/theta2[i]
alpha <- 0.01875
C11 <- C_out/C_in
A <- 1 - (alpha / 2)
B <- alpha / 2
#E0 <- 0.5 * (par_in[1] + par_in[2] - C_in^(-1))
E1 <- 0.5 * (theta1[i] + theta2[i] - C_out^(-1))
cons <- 1 / (theta1[i] * C_out)
const <- 1 / (theta2[i] * C_out)
num <- 2 - (1 - (A^C11) + (B^C11))
denum <-
(1 - (A^C11) + (B^C11)) + ((B^C11 - A^C11) *
(cons * (A^t2 - B^t2 - 1)) - (const * (A^t1 + B^t1 + 1)))
ATS <- E1 * (num / denum)
print(ATS)
}
setwd("C:/Code/New folder/New_Results_09_05_22")
library(tidyverse)
library(dplyr)
library(fs)
library(ggplot2)
library(Hmisc)
library(cowplot)
library(tools)
file_paths <- fs::dir_ls("C:/Code/New folder/New_Results_09_05_22")
file_paths
file_contents <- list()
seq_along(file_paths)
for (i in seq_along(file_paths)) {
file_contents[[i]] <- read.csv(file = file_paths[[i]])
df <- file_contents[[i]]
filename <- file_path_sans_ext(basename(file_paths[[i]]))
names(df) <-
c("dataset",
"filtr_time",
"training_time",
"accuracy",
"auc",
# "thresh",
"step_size",
"flat_conf_mat") #give column names
df <-
subset(df, select = -c(flat_conf_mat)) #remove last column
sort_result <- df %>%
dplyr::group_by(dataset, step_size) %>%
dplyr::summarise(
avgacc = mean(accuracy) * 100,
stdacc = sd(accuracy) * 100,
avgauc = mean(auc) * 100,
stdauc = sd(auc) * 100,
avgfiltrtime = mean(filtr_time),
avgtraintime = mean(training_time),
.groups = "keep"
)  #sort results based on the dataset and the step_size
sum_by_max <-
sort_result %>% dplyr::group_by(dataset) %>%
dplyr::slice(which.max(avgacc)) %>%
dplyr::mutate_if(is.numeric, round, 2)
#sort again using maximum average auc of each group
latex(
sum_by_max,
caption = filename,
file = paste("result_9_5", ".tex", sep = ""),
append = TRUE,
label = filename,
rowname = NULL,
center = "centering"
) #write to latex file
#  plt <- ggplot(sort_result, aes(
#    x = step_size,
#    y = avgauc,
#    #group_by = dataset,
#    color = dataset
#  )) + geom_line()
#
#  plt
#
# ggsave(paste("graph/",toString(filename),".png",sep=""))
}
